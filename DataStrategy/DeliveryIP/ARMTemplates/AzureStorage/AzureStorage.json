{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 24,
      "metadata": {
        "description": "Optional. Name of the Storage Account. If no name is provided, then unique name will be created."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "storageAccountKind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "Storage",
        "StorageV2",
        "BlobStorage",
        "FileStorage",
        "BlockBlobStorage"
      ],
      "metadata": {
        "description": "Optional. Type of Storage Account to create."
      }
    },
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_GRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ],
      "metadata": {
        "description": "Optional. Storage Account Sku Name."
      }
    },
    "storageAccountAccessTier": {
      "type": "string",
      "defaultValue": "Hot",
      "allowedValues": [
        "Hot",
        "Cool"
      ],
      "metadata": {
        "description": "Optional. Storage Account Access Tier."
      }
    },
    "vNetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Virtual Network Identifier used to create a service endpoint."
      }
    },
    "privateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Configuration Details for private endpoints."
      }
    },
    "networkAcls": {
      "type": "object",
      "defaultValue": {
      },
      "metadata": {
        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information."
      }
    },
    "blobContainers": {
      "type": "array",
      "defaultValue": [
      ],
      "metadata": {
        "description": "Optional. Blob containers to create."
      }
    },
    "deleteRetentionPolicy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether DeleteRetentionPolicy is enabled for the Blob service.  This should be false for HNS enabled storage."
      }
    },
    "deleteRetentionPolicyDays": {
      "type": "int",
      "defaultValue": 7,
      "metadata": {
        "description": "Optional. Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365."
      }
    },
    "automaticSnapshotPolicyEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Automatic Snapshot is enabled if set to true."
      }
    },
    "allowBlobPublicAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account."
      }
    },
    "enableArchiveAndDelete": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. If true, enables move to archive tier and auto-delete"
      }
    },
    "enableHierarchicalNamespace": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. If true, enables Hierarchical Namespace for the storage account"
      }
    },
    "moveToArchiveAfter": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Optional. Set up the amount of days after which the blobs will be moved to archive tier"
      }
    },
    "deleteBlobsAfter": {
      "type": "int",
      "defaultValue": 1096,
      "metadata": {
        "description": "Optional. Set up the amount of days after which the blobs will be deleted"
      }
    },
    "lockForDeletion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Switch to lock storage from deletion."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    }
  },
  "variables": {
    "virtualNetworkRules": {
      "copy": [
        {
          "name": "virtualNetworkRules",
          "count": "[if(empty(parameters('networkAcls')), 0, length(parameters('networkAcls').virtualNetworkRules))]",
          "input": {
            "id": "[concat(parameters('vNetId'), '/subnets/', parameters('networkAcls').virtualNetworkRules[copyIndex('virtualNetworkRules')].subnet)]"
          }
        }
      ]
    },
    "networkAcls": {
      "bypass": "[if(empty(parameters('networkAcls')), json('null'), parameters('networkAcls').bypass)]",
      "defaultAction": "[if(empty(parameters('networkAcls')), json('null'), parameters('networkAcls').defaultAction)]",
      "virtualNetworkRules": "[if(empty(parameters('networkAcls')), json('null'), variables('virtualNetworkRules').virtualNetworkRules)]",
      "ipRules": "[if(empty(parameters('networkAcls')), json('null'), if(equals(length(parameters('networkAcls').ipRules), 0), json('null'), parameters('networkAcls').ipRules))]"
    },

    // It was needed to decouple the Stroage Account Parameters to a variable, as this was the only option to keep not let the azureFilesIdentityBasedAuthentication
    // configuration changed back to null, when not providing a corresponding input parameter. With other word, using the json('null') expression in the body
    // of the Storage Account's properties block did not achieve the desired results.
    "saBaseProperties": {
      "encryption": {
        "keySource": "Microsoft.Storage",
        "services": {
          "blob": "[if(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage'), equals(parameters('storageAccountKind'), 'StorageV2'), equals(parameters('storageAccountKind'), 'Storage')), json('{\"enabled\": true}'), json('null'))]"
        }
      },
      "accessTier": "[parameters('storageAccountAccessTier')]",
      "supportsHttpsTrafficOnly": true,
      "isHnsEnabled": "[if(not(parameters('enableHierarchicalNamespace')), json('null'), parameters('enableHierarchicalNamespace'))]",
      "minimumTlsVersion": "TLS1_2",
      "networkAcls": "[if(empty(parameters('networkAcls')), json('null'), variables('networkAcls'))]",
      "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]"
    }
  },
  "resources": [
    // cuaId
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('pid-', parameters('cuaId'))]",
      "condition": "[not(empty(parameters('cuaId')))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    // storage account
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "[parameters('storageAccountKind')]",
      "sku": {
        "name": "[parameters('storageAccountSku')]"
      },
      // It was needed to decouple the Storage Account Parameters to a variable, as this was the only option to keep not let the azureFilesIdentityBasedAuthentication
      // configuration changed back to null, when not providing a corresponding input parameter. With other word, using the json('null') expression in the body
      // of the Storage Account's properties block did not achieve the desired results.
      "properties": "[variables('saBaseProperties')]",
      "resources": [
        {
          "type": "providers/locks",
          "apiVersion": "2016-09-01",
          "condition": "[parameters('lockForDeletion')]",
          "name": "Microsoft.Authorization/storageDoNotDelete",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
          ],
          "comments": "Resource lock on the Storage Account",
          "properties": {
            "level": "CannotDelete"
          }
        }
      ]
    },
    // private endpoints
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat(uniqueString(deployment().name, parameters('location')), '-Storage-PrivateEndpoints','-',copyIndex())]",
      "condition": "[not(empty(parameters('privateEndpoints')))]",
      "dependsOn": [
        "[parameters('storageAccountName')]"
      ],
      "copy": {
        "name": "privateEndpointsCopy",
        "count": "[length(parameters('privateEndpoints'))]"
      },
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "privateEndpointResourceId": {
            "value": "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
          },
          "privateEndpointVnetLocation": {
            "value": "[if(empty(parameters('privateEndpoints')),'dummy',reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId,'/subnets/')[0],'2020-06-01', 'Full').location)]"
          },
          "privateEndpoint": {
            "value": "[parameters('privateEndpoints')[copyIndex()]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "privateEndpointResourceId": {
              "type": "string"
            },
            "privateEndpointVnetLocation": {
              "type": "string"
            },
            "privateEndpoint": {
              "type": "object"
            }
          },
          "variables": {
            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'),'/'))]",
            "privateEndpoint": {
              "name": "[if(contains(parameters('privateEndpoint'), 'name'),if(empty(parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service),parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service))]",
              "subnetResourceId": "[parameters('privateEndpoint').subnetResourceId]",
              "service": [
                "[parameters('privateEndpoint').service]"
              ],
              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpoint'), 'privateDnsZoneResourceIds'),if(empty(parameters('privateEndpoint').privateDnsZoneResourceIds),createArray(),parameters('privateEndpoint').privateDnsZoneResourceIds),createArray())]",
              "customDnsConfigs": "[if(contains(parameters('privateEndpoint'), 'customDnsConfigs'),if(empty(parameters('privateEndpoint').customDnsConfigs),json('null'),parameters('privateEndpoint').customDnsConfigs),json('null'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-05-01",
              "name": "[variables('privateEndpoint').name]",
              "location": "[parameters('privateEndpointVnetLocation')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpoint').name]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                      "groupIds": "[variables('privateEndpoint').service]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[variables('privateEndpoint').subnetResourceId]"
                },
                "customDnsConfigs": "[variables('privateEndpoint').customDnsConfigs]"
              }
            }
          ]
        }
      }
    },
    // blob services
    {

      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "condition": "[not(empty(parameters('blobContainers')))]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
      ],
      "properties": {
        "deleteRetentionPolicy": {
          "enabled": "[parameters('deleteRetentionPolicy')]",
          "days": "[parameters('deleteRetentionPolicyDays')]"
        },
        "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]"
      }
    },
    // storage container
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[if(empty(parameters('blobContainers')), concat(parameters('storageAccountName'), '/', 'default/dummy'), concat(parameters('storageAccountName'), '/default/', parameters('blobContainers')[copyIndex()].name))]",
      "condition": "[not(empty(parameters('blobContainers')))]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
      ],
      "copy": {
        "name": "containerLoop",
        "count": "[length(parameters('blobContainers'))]"
      },
      "properties": {
        "publicAccess": "[parameters('blobContainers')[copyIndex()].publicAccess]"
      },
      "resources": [

      ]
    },
    // lifecycle policy
    {
      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
      "apiVersion": "2019-06-01",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "condition": "[parameters('enableArchiveAndDelete')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/',parameters('storageAccountName'))]"
      ],
      "properties": {
        "policy": {
          "rules": [
            {
              "enabled": true,
              "name": "retention-policy",
              "type": "Lifecycle",
              "definition": {
                "actions": {
                  "baseBlob": {
                    "tierToArchive": {
                      "daysAfterModificationGreaterThan": "[parameters('moveToArchiveAfter')]"
                    },
                    "delete": {
                      "daysAfterModificationGreaterThan": "[parameters('deleteBlobsAfter')]"
                    }
                  },
                  "snapshot": {
                    "delete": {
                      "daysAfterCreationGreaterThan": "[parameters('deleteBlobsAfter')]"
                    }
                  }
                },
                "filters": {
                  "blobTypes": [
                    "blockBlob"
                  ]
                }
              }
            }
          ]
        }
      }
    }
  ],
  "functions": [
  ],
  "outputs": {
    "storageAccountResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
      "metadata": {
        "description": "The Resource Id of the Storage Account."
      }
    },
    "storageAccountRegion": {
      "type": "string",
      "value": "[parameters('location')]",
      "metadata": {
        "description": "The Region of the Storage Account."
      }
    },
    "storageAccountName": {
      "type": "string",
      "value": "[parameters('storageAccountName')]",
      "metadata": {
        "description": "The Name of the Storage Account."
      }
    },
    "storageAccountResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group the Storage Account was created in."
      }
    },
    "storageAccountPrimaryBlobEndpoint": {
      "type": "string",
      "value": "[if(empty(parameters('blobContainers')), '', reference(concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2019-04-01').primaryEndpoints.blob)]",
      "metadata": {
        "description": "The public endpoint of the Storage Account."
      }
    },
    "blobContainers": {
      "type": "array",
      "value": "[parameters('blobContainers')]",
      "metadata": {
        "description": "The array of the blob containers created."
      }
    }
  }
}